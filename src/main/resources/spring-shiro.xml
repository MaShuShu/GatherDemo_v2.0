<?xml version="1.0" encoding="UTF-8"?>
<beans xmlns="http://www.springframework.org/schema/beans"
	xmlns:xsi="http://www.w3.org/2001/XMLSchema-instance" xmlns:p="http://www.springframework.org/schema/p"
	xmlns:aop="http://www.springframework.org/schema/aop" xmlns:context="http://www.springframework.org/schema/context"
	xmlns:jee="http://www.springframework.org/schema/jee" xmlns:tx="http://www.springframework.org/schema/tx"
	xmlns:mvc="http://www.springframework.org/schema/mvc"
	xsi:schemaLocation="    
        http://www.springframework.org/schema/aop http://www.springframework.org/schema/aop/spring-aop-4.0.xsd  
        http://www.springframework.org/schema/beans http://www.springframework.org/schema/beans/spring-beans-4.0.xsd  
        http://www.springframework.org/schema/context http://www.springframework.org/schema/context/spring-context-4.0.xsd  
        http://www.springframework.org/schema/jee http://www.springframework.org/schema/jee/spring-jee-4.0.xsd  
        http://www.springframework.org/schema/tx http://www.springframework.org/schema/tx/spring-tx-4.0.xsd
        http://www.springframework.org/schema/mvc http://www.springframework.org/schema/mvc/spring-mvc-4.0.xsd">

	<!-- ========================================== 会话管理 ========================================== -->
	<!-- 会话验证调度器 -->
	<bean id="sessionValidationScheduler" class="org.apache.shiro.session.mgt.ExecutorServiceSessionValidationScheduler">
		 <!-- 间隔多少时间检查，不配置是60分钟 -->
	     <property name="interval" value="18000000"/>
	     <property name="sessionManager" ref="sessionManager"/>
	</bean>
	
	<bean id="sessionDAO" class="com.modules.sys.realm.sessionDao.RedisSessionDao">
		<property name="redis" ref="redisUtil" />
        <property name="timeToLiveSeconds" value="1800"/>
	</bean>
	
	<!-- Session 管理器 -->
	<bean id="sessionManager" class="org.apache.shiro.web.session.mgt.DefaultWebSessionManager">
		<!-- 设置全局会话超时时间，默认20分钟，即如果20分钟内没有访问会话将过期 -->
		<property name="globalSessionTimeout" value="1800000" />
		<property name="sessionDAO" ref="sessionDAO" />
		<!-- 间隔多少时间检查，不配置是60分钟 -->
		<property name="sessionValidationScheduler" ref="sessionValidationScheduler"></property>
		<!-- 是否开启 检测，默认开启 -->
		<property name="sessionValidationSchedulerEnabled" value="true"/>
		<!-- 删除失效的session -->
		<property name="deleteInvalidSessions" value="true" />
		<!-- 会话Cookie模板 -->
		<property name="sessionIdCookie" ref="sessionIdCookie"/>
	</bean>
	
	<!-- 会话Cookie模板会话Cookie模板  -->
    <bean id="sessionIdCookie" class="org.apache.shiro.web.servlet.SimpleCookie">
    	<!-- cookie的name -->
        <constructor-arg value="sid"/>
        <property name="httpOnly" value="true"/>
        <!-- maxAge=-1表示浏览器关闭时失效此Cookie -->
        <property name="maxAge" value="-1"/>
    </bean>
    
    <!-- 用户信息 记住我 -->
	<bean id="rememberMeCookie" class="org.apache.shiro.web.servlet.SimpleCookie">
		<constructor-arg value="rememberMe" />
		<property name="httpOnly" value="true" />
		<!-- 30天 -->
		<property name="maxAge" value="2592000" />
	</bean>
	
	<!-- rememberMe管理器 -->
	<bean id="rememberMeManager" class="org.apache.shiro.web.mgt.CookieRememberMeManager">
		<!-- rememberMe cookie加密的密钥 建议每个项目都不一样 默认AES算法 密钥长度（128 256 512 位）-->
		<property name="cipherKey" value="#{T(org.apache.shiro.codec.Base64).decode('4AvVhmFLUs0KTA3Kprsdag==')}" />
		<property name="cookie" ref="rememberMeCookie" />
	</bean>
	
	<!-- ========================================== 缓存、加密  ========================================== -->
	<!-- 缓存管理器 使用Ehcache实现 -->
	<bean id="cacheManager" class="org.apache.shiro.cache.ehcache.EhCacheManager">
		<property name="cacheManagerConfigFile" value="classpath:cache/ehcache.xml" />
	</bean>
	
	<!-- 并发登录控制 -->
	<bean id="kickoutSessionControlFilter"
		class="com.modules.sys.realm.KickoutSessionControlFilter">
		<property name="cacheManager" ref="cacheManager"/>  
	    <property name="sessionManager" ref="sessionManager"/>  
	    <property name="kickoutAfter" value="false"/>  
	    <property name="maxSession" value="1"/>  
	    <property name="kickoutUrl" value="/login.do?kickout=1"/>
	</bean>
	
	<!-- 凭证匹配器 -->  
	<bean id="credentialsMatcher" class="com.modules.sys.realm.RetryLimitHashedCredentialsMatcher">
	    <constructor-arg ref="cacheManager"/>
	    <property name="hashAlgorithmName" value="md5"/>
	    <property name="hashIterations" value="2"/>
	    <property name="storedCredentialsHexEncoded" value="true"/>
	</bean>

	<!-- 自定义Realm -->
	<bean id="myRealm" class="com.modules.sys.realm.MyRealm">
		<property name="credentialsMatcher" ref="credentialsMatcher"/>
        <property name="cachingEnabled" value="true"/>
        <property name="authenticationCachingEnabled" value="true"/>
        <property name="authenticationCacheName" value="authenticationCache"/>
        <property name="authorizationCachingEnabled" value="true"/>
        <property name="authorizationCacheName" value="authorizationCache"/>
	</bean>

	<!-- ==========================================安全管理器========================================== -->
	<bean id="securityManager" class="org.apache.shiro.web.mgt.DefaultWebSecurityManager">
		<property name="realm" ref="myRealm" />
		<property name="sessionManager" ref="sessionManager" />
		<!-- Ehcache 缓存 -->
		<property name="cacheManager" ref="cacheManager" />
	</bean>

	<!--自定义的Roles Filter 修改权限的 And问题，将And关系改为Or -->
	<bean id="anyRoles" class="com.modules.sys.realm.CustomRolesAuthorizationFilter" />

	<!-- Shiro生命周期处理器 -->
	<bean id="lifecycleBeanPostProcessor" class="org.apache.shiro.spring.LifecycleBeanPostProcessor" />
	
	<!-- ==========================================web相关========================================== -->
	<!-- Shiro过滤器 id要跟web.xml一致 -->
	<bean id="shiroFilter" class="com.modules.sys.realm.webcookie.MyShiroFilterFactoryBean">
		<!-- Shiro的核心安全接口,这个属性是必须的 -->
		<property name="securityManager" ref="securityManager" />
		<!-- 登录页 -->
		<property name="loginUrl" value="/login.do" />
		<!-- 登录成功跳转页面 -->
		<!-- <property name="successUrl" value="/sys/index.do" /> -->
		<!-- 权限认证失败，则跳转到指定页面 -->
		<property name="unauthorizedUrl" value="/unauthor.do" />
		<!-- 自定义Roles Filter -->
		<property name="filters">
			<map>
				<entry key="anyRoles" value-ref="anyRoles"/>
				<entry key="kickout" value-ref="kickoutSessionControlFilter"/>
			</map>
		</property>
		
		<!-- shiro连接约束配置,在这里使用自定义的 从数据库中动态获取资源 -->
		<property name="filterChainDefinitionMap" ref="DynamicUrls" />
	</bean>
	
	<!-- 动态拦截url,在系统修改的时候需要重启才生效 -->
	<bean id="DynamicUrls" class="com.modules.sys.realm.DynamicUrls">
		<!-- Shiro连接约束配置,即过滤链的定义 -->
		<property name="filterChainDefinitions">
			<value>
				<!-- 静态资源 -->
				/css/**=anon
				/js/**=anon
				/ico/**=anon
				/images/**=anon
				/ueditor/**=anon
				/**/uploadfile/**=anon
				/img/**=anon
				<!-- index不需要验证 -->
				/=anon
				/index=anon
				/login = anon
                /logout = logout
                /**=kickout,authc
				<!-- /sys/**=anyRoles[admin,employee]  -->
				<!-- /user/**=roles[admin]
				/user=perms["user:view"] -->
				<!-- 所有的都需要验证 -->
				<!-- /**=authc -->
			</value>
		</property>
	</bean>
	
	<!-- shiro 权限注解 抛出异常 指定跳转的页面(unauthor.jsp) -->
	<bean class="org.springframework.web.servlet.handler.SimpleMappingExceptionResolver">
        <property name="exceptionMappings">
            <props>
                <prop key="org.apache.shiro.authz.UnauthorizedException">/unauthor</prop>
                <prop key="org.apache.shiro.authz.UnauthenticatedException">/login</prop>
            </props>
        </property>
    </bean>
	
</beans>
